# 거스름돈을 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재
# 손님에게 거슬러 줘야할 돈이 n원일 때, 거슬러 줘야할 동전의 <최소개수>
# 단 거슬러줘야 할 돈 n은 항상 10의 배수 ex) 10, 20, 30원 등의 단위로 떨어져야함


# 1. 아이디어 도출
# 가장 큰 화폐 단위부터 돈을 거슬러줌 => n원을 거슬러 줘야 할 때, 가장 먼저 500원을 거슬러 줄 수 있을 만큼 거슬러 줌, 그 다음에 100 > 50 > 10 순서로 거슬러줌

n = 1260
cnt = 0

coin = [500, 100, 50, 10] # 가장 큰 단위의 동전부터 입력 받음


for i in coin: 
    cnt += n//i # 거스름돈에서 해당 화폐를 나누어 나오는 몫이 해당 화폐로 거슬러 줄 수 있는 동전의 개수임
    n %= i # n % i는 n 인 나머지(500원으로 나누고 떨어진 나머지)

print(cnt)

# 화폐의 종류가 k개라 할 때, 시간 복잡도는 o(k) => 금액과는 무관, 동전의 종류에만 연관
# 단, 해당 문제가 그리디로 풀린 이유는 큰단위가 항상 작은 단위의 배수이므로 가능한 것임
# 500 400 100 인 경우에는 그리디로 문제 풀 수 없음 => 500으로 나눈 후 나머지가 400의 배수가 아니기 때문
# 작은 단위의 동전들을 종합해 다른 최적의 해가 나올 수 없기 때문